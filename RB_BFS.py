def aStarAlgo(start_node, stop_node):
open_set = set(start_node)
closed_set = set()
g = {} # store distance from starting node
parents = { }# parents contains an adjacency map of all nodes
# ditance of starting node from itself is zero
g[start_node] = 0
# start_node is root node i.e it has no parent nodes
# so start_node is set to its own parent node
parents[start_node] = start_node

while len(open_set) &gt; 0:
n = None
# node with lowest f() is found
for v in open_set:
if n == None or g[v] + heuristic(v) &lt; g[n] + heuristic(n):
n = v

if n == stop_node or Graph_nodes[n] == None:
pass
else:
for (m, weight) in get_neighbors(n):
# nodes &#39;m&#39; not in first and last set are added to first
# n is set its parent
if m not in open_set and m not in closed_set:
open_set.add(m)
parents[m] = n
g[m] = g[n] + weight

# for each node m,compare its distance from start i.e g(m) to the
# from start through n node
else:
if g[m] &gt; g[n] + weight:
# update g(m)
g[m] = g[n] + weight
# change parent of m to n
parents[m] = n
# if m in closed set,remove and add to open
if m in closed_set:

closed_set.remove(m)
open_set.add(m)
if n == None:
print(&#39;Path does not exist!&#39;)
return None
# if the current node is the stop_node
# then we begin reconstructin the path from it to the start_node
if n == stop_node:
path = []
while parents[n] != n:
path.append(n)
n = parents[n]
path.append(start_node)
path.reverse()
print(&#39;Path found: {}&#39;.format(path))
return path

# remove n from the open_list, and add it to closed_list
# because all of his neighbors were inspected
open_set.remove(n)
closed_set.add(n)
print(&#39;Path does not exist!&#39;)
return None

# define fuction to return neighbor and its distance
# from the passed node
def get_neighbors(v):
if v in Graph_nodes:
return Graph_nodes[v]
else:
return None

# for simplicity we ll consider heuristic distances given
# and this function returns heuristic distance for all nodes
def heuristic(n):
H_dist = {

&#39;S&#39;: 1,
&#39;3&#39;: 1,
&#39;4&#39;: 1,
&#39;G&#39;: 1,
&#39;7&#39;: 1,
&#39;9&#39;: 1,
&#39;10&#39;: 1,
&#39;12&#39;: 1,
&#39;13&#39;: 1,
&#39;14&#39;: 1,
&#39;15&#39;: 1,
&#39;16&#39;: 1,
&#39;18&#39;: 1,
&#39;19&#39;: 1,
&#39;20&#39;: 1,
&#39;22&#39;: 1,
&#39;24&#39;: 1,
&#39;25&#39;: 1,
&#39;26&#39;: 1,
&#39;28&#39;: 1,
&#39;29&#39;: 1,
&#39;30&#39;: 1,
&#39;31&#39;: 1,
&#39;32&#39;: 1,
&#39;34&#39;: 1,
&#39;35&#39;: 1,
&#39;36&#39;: 1,
&#39;37&#39;: 1,
&#39;38&#39;: 1,
&#39;40&#39;: 1,
&#39;41&#39;: 1,
&#39;42&#39;: 1,
&#39;43&#39;: 1,
&#39;44&#39;: 1,
&#39;45&#39;: 1,
&#39;46&#39;: 1,
&#39;47&#39;: 1,
&#39;48&#39;: 1,
&#39;49&#39;: 1,
&#39;OBS&#39;: 10,
}
return H_dist[n]

# Describe your graph here
Graph_nodes = {
&#39;S&#39;: [(&#39;OBS&#39;, 1), (&#39;7&#39;, 1), (&#39;OBS&#39;, 1)],
&#39;3&#39;: [(&#39;OBS&#39;, 1), (&#39;4&#39;, 1), (&#39;OBS&#39;, 1), (&#39;9&#39;, 1), (&#39;10&#39;, 1)],
&#39;4&#39;: [(&#39;3&#39;, 1), (&#39;9&#39;, 1), (&#39;OBS&#39;, 1), (&#39;10&#39;, 1)],
&#39;43&#39;: [(&#39;12&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1), (&#39;G&#39;, 1), (&#39;44&#39;, 1)],
&#39;7&#39;: [(&#39;S&#39;, 1), (&#39;14&#39;, 1), (&#39;13&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1)],
&#39;9&#39;: [(&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1), (&#39;14&#39;, 1), (&#39;15&#39;, 1), (&#39;16&#39;, 1), (&#39;10&#39;, 1), (&#39;4&#39;, 1), (&#39;3&#39;, 1)],
&#39;10&#39;: [(&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1), (&#39;4&#39;, 1), (&#39;3&#39;, 1), (&#39;9&#39;, 1), (&#39;15&#39;, 1), (&#39;16&#39;, 1), (&#39;OBS&#39;, 1)],
&#39;12&#39;: [(&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1), (&#39;43&#39;, 1), (&#39;18&#39;, 1), (&#39;44&#39;, 1), (&#39;45&#39;, 1), (&#39;G&#39;, 1)],
&#39;13&#39;: [(&#39;7&#39;, 1), (&#39;OBS&#39;, 1), (&#39;14&#39;, 1), (&#39;20&#39;, 1), (&#39;19&#39;, 1)],
&#39;14&#39;: [(&#39;OBS&#39;, 1), (&#39;7&#39;, 1), (&#39;13&#39;, 1), (&#39;19&#39;, 1), (&#39;20&#39;, 1), (&#39;OBS&#39;, 1), (&#39;15&#39;, 1), (&#39;9&#39;, 1)],
&#39;15&#39;: [(&#39;9&#39;, 1), (&#39;OBS&#39;, 1), (&#39;14&#39;, 1), (&#39;20&#39;, 1), (&#39;OBS&#39;, 1), (&#39;22&#39;, 1), (&#39;16&#39;, 1), (&#39;10&#39;, 1)],
&#39;16&#39;: [(&#39;10&#39;, 1), (&#39;9&#39;, 1), (&#39;15&#39;, 1), (&#39;OBS&#39;, 1), (&#39;22&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1)],
&#39;18&#39;: [(&#39;12&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1), (&#39;24&#39;, 1), (&#39;44&#39;, 1), (&#39;45&#39;, 1), (&#39;46&#39;, 1)],
&#39;19&#39;: [(&#39;13&#39;, 1), (&#39;14&#39;, 1), (&#39;20&#39;, 1), (&#39;25&#39;, 1), (&#39;26&#39;, 1)],
&#39;20&#39;: [(&#39;14&#39;, 1), (&#39;13&#39;, 1), (&#39;19&#39;, 1), (&#39;25&#39;, 1), (&#39;26&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1), (&#39;15&#39;, 1)],
&#39;22&#39;: [(&#39;16&#39;, 1), (&#39;15&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1), (&#39;28&#39;, 1), (&#39;29&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1)],
&#39;24&#39;: [(&#39;18&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1), (&#39;29&#39;, 1), (&#39;30&#39;, 1), (&#39;45&#39;, 1), (&#39;46&#39;, 1), (&#39;47&#39;, 1)],
&#39;25&#39;: [(&#39;19&#39;, 1), (&#39;20&#39;, 1), (&#39;26&#39;, 1), (&#39;32&#39;, 1), (&#39;31&#39;, 1)],
&#39;26&#39;: [(&#39;20&#39;, 1), (&#39;19&#39;, 1), (&#39;25&#39;, 1), (&#39;31&#39;, 1), (&#39;32&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1)],
&#39;28&#39;: [(&#39;22&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1), (&#39;34&#39;, 1), (&#39;35&#39;, 1), (&#39;29&#39;, 1), (&#39;OBS&#39;, 1)],
&#39;29&#39;: [(&#39;OBS&#39;, 1), (&#39;22&#39;, 1), (&#39;28&#39;, 1), (&#39;34&#39;, 1), (&#39;35&#39;, 1), (&#39;36&#39;, 1), (&#39;30&#39;, 1), (&#39;24&#39;, 1)],
&#39;30&#39;: [(&#39;24&#39;, 1), (&#39;OBS&#39;, 1), (&#39;29&#39;, 1), (&#39;35&#39;, 1), (&#39;36&#39;, 1), (&#39;46&#39;, 1), (&#39;47&#39;, 1), (&#39;48&#39;, 1)],
&#39;31&#39;: [(&#39;25&#39;, 1), (&#39;26&#39;, 1), (&#39;32&#39;, 1), (&#39;37&#39;, 1), (&#39;38&#39;, 1)],
&#39;32&#39;: [(&#39;26&#39;, 1), (&#39;25&#39;, 1), (&#39;31&#39;, 1), (&#39;37&#39;, 1), (&#39;38&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1)],
&#39;34&#39;: [(&#39;28&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1), (&#39;40&#39;, 1), (&#39;41&#39;, 1), (&#39;35&#39;, 1), (&#39;29&#39;, 1)],
&#39;35&#39;: [(&#39;29&#39;, 1), (&#39;28&#39;, 1), (&#39;34&#39;, 1), (&#39;40&#39;, 1), (&#39;41&#39;, 1), (&#39;42&#39;, 1), (&#39;36&#39;, 1), (&#39;30&#39;, 1)],
&#39;36&#39;: [(&#39;30&#39;, 1), (&#39;29&#39;, 1), (&#39;35&#39;, 1), (&#39;41&#39;, 1), (&#39;42&#39;, 1), (&#39;47&#39;, 1), (&#39;48&#39;, 1), (&#39;49&#39;, 1)],
&#39;37&#39;: [(&#39;31&#39;, 1), (&#39;32&#39;, 1), (&#39;38&#39;, 1)],
&#39;38&#39;: [(&#39;31&#39;, 1), (&#39;32&#39;, 1), (&#39;37&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1)],
&#39;40&#39;: [(&#39;34&#39;, 1), (&#39;35&#39;, 1), (&#39;41&#39;, 1), (&#39;OBS&#39;, 1), (&#39;OBS&#39;, 1)],
&#39;41&#39;: [(&#39;34&#39;, 1), (&#39;40&#39;, 1), (&#39;35&#39;, 1), (&#39;36&#39;, 1), (&#39;42&#39;, 1)],
&#39;42&#39;: [(&#39;36&#39;, 1), (&#39;41&#39;, 1), (&#39;35&#39;, 1), (&#39;48&#39;, 1), (&#39;49&#39;, 1)],
&#39;G&#39;: [(&#39;43&#39;, 1), (&#39;12&#39;, 1), (&#39;44&#39;, 1)],
&#39;44&#39;: [(&#39;G&#39;, 1), (&#39;43&#39;, 1), (&#39;12&#39;, 1), (&#39;18&#39;, 1), (&#39;45&#39;, 1)],
&#39;45&#39;: [(&#39;44&#39;, 1), (&#39;12&#39;, 1), (&#39;18&#39;, 1), (&#39;24&#39;, 1), (&#39;46&#39;, 1)],
&#39;46&#39;: [(&#39;45&#39;, 1), (&#39;18&#39;, 1), (&#39;24&#39;, 1), (&#39;30&#39;, 1), (&#39;47&#39;, 1)],
&#39;47&#39;: [(&#39;46&#39;, 1), (&#39;24&#39;, 1), (&#39;30&#39;, 1), (&#39;36&#39;, 1), (&#39;48&#39;, 1)],
&#39;48&#39;: [(&#39;47&#39;, 1), (&#39;30&#39;, 1), (&#39;36&#39;, 1), (&#39;42&#39;, 1), (&#39;49&#39;, 1)],
&#39;49&#39;: [(&#39;48&#39;, 1), (&#39;36&#39;, 1), (&#39;42&#39;, 1)]
}
aStarAlgo(&#39;S&#39;, &#39;G&#39;)